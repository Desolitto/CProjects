/**
 * @file my_calc.h
 * @brief Этот файл содержит реализацию калькулятора, который преобразует
 * инфиксную нотацию в обратную польскую нотацию и затем вычисляет выражение.
 */
#ifndef CALC_H
#define CALC_H

#include "../my_smart_calc.h"

/**
 * @brief Вычисляет результат арифметической функции по символьному обозначению.
 * @param func Символ обозначающий арифметическую функцию (cos, sin, tan, acos,
 * asin, atan, sqrt, log, log10).
 * @param num Аргумент функции.
 * @param status Указатель на переменную для хранения статуса вычисления.
 * @return Результат вычисления функции.
 */
double arithmetic_func(char func, double num, int *flag);

/**
 * @brief Вычисляет результат выражения в обратной польской нотации (RPN).
 * @param expression Строка с выражением в RPN.
 * @param result Указатель на переменную для хранения результата вычисления.
 * @param x Значение переменной x, используемой в выражении.
 * @return Статус вычисления (OK, если вычисление прошло успешно).
 */
double calculateRPN(char *expression, double *result, double x);

/**
 * @brief Выполняет полное вычисление выражения в инфиксной нотации.
 * @param infix_expr Строка с выражением в инфиксной нотации.
 * @param num Указатель на переменную для хранения результата вычисления.
 * @param x Строка с выражением для переменной x, используемой в выражении.
 * @return Статус вычисления (OK, если вычисление прошло успешно).
 */
int full_calcuation(char *infix_expr, double *num, char *x);

#endif