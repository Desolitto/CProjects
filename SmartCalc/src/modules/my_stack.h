/**
 * @file my_stack.h
 * @brief Файл, содержащий реализацию стековых структур и функций для работы с
 * ними.
 *
 * В этом файле определены структуры и функции для работы с символьными и
 * числовыми стеками, включая инициализацию, добавление элементов, удаление
 * элементов и проверку на пустоту стека.
 */

#ifndef STACK_H
#define STACK_H

#include "../my_smart_calc.h"

/**
 * @brief Структура для представления узла стека с символьными данными.
 * @var data Данные, хранящиеся в узле стека.
 * @var prev Указатель на предыдущий узел стека.
 */
typedef struct Stack {
  char data;
  struct Stack *prev;
} Stack;

/**
 * @brief Инициализирует новый узел стека с заданными данными.
 * @param data Данные для нового узла стека.
 * @return Указатель на новый узел стека.
 */
Stack *initStack(char data);

/**
 * @brief Добавляет новый элемент в верх стека.
 * @param top Указатель на верх стека.
 * @param data Данные для нового элемента.
 * @return OK, если элемент успешно добавлен, иначе MEMORY_ERROR.
 */
int push(Stack **top, char data);

/**
 * @brief Удаляет и возвращает верхний элемент стека.
 * @param top Указатель на верх стека.
 * @return Данные удаленного элемента.
 */
char pop(Stack **top);

/**
 * @brief Проверяет, пуст ли стек.
 * @param top Указатель на верх стека.
 * @return 1, если стек пуст, иначе 0.
 */
int is_stack_empty(Stack *top);

/**
 * @brief Структура для представления узла стека с данными типа double.
 * @var data Данные типа double, хранящиеся в узле стека.
 * @var prev Указатель на предыдущий узел стека.
 */
typedef struct D_Stack {
  double data;  // Изменено на double для хранения чисел
  struct D_Stack *prev;
} D_Stack;

/**
 * @brief Инициализирует новый узел стека с заданными данными типа double.
 * @param data Данные для нового узла стека типа double.
 * @return Указатель на новый узел стека типа double.
 */
D_Stack *initStack_d(double data);

/**
 * @brief Добавляет новый элемент типа double в верх стека.
 * @param top Указатель на верх стека типа double.
 * @param data Данные для нового элемента типа double.
 * @return OK, если элемент успешно добавлен, иначе MEMORY_ERROR.
 */
double pop_d(D_Stack **stack);

/**
 * @brief Удаляет и возвращает верхний элемент стека типа double.
 * @param stack Указатель на стек типа double.
 * @return Данные удаленного элемента типа double.
 */
int push_d(D_Stack **top, double data);

/**
 * @brief Проверяет, пуст ли стек типа double.
 * @param top Указатель на верх стека типа double.
 * @return 1, если стек пуст, иначе 0.
 */
int is_stack_empty_d(D_Stack *top);

/**
 * Функция извлекает элемент из вершины стека и добавляет его в строку
 * результата, а затем добавляет пробел в строку результата.
 *
 * @param stack Указатель на указатель на вершину стека, из которого будет
 * извлечен элемент.
 * @param res_str Строка, в которую будет добавлен извлеченный элемент и пробел.
 * @param j Указатель на индекс в строке результата, куда будет добавлен
 * элемент.
 */

/**
 * @brief Удаляет верхний элемент стека и добавляет его в строку результата, а
 * также добавляет пробел.
 * @param stack Указатель на верх стека.
 * @param res_str Строка, в которую добавляется символ и пробел.
 * @param j Указатель на индекс в строке результата.
 */
void pop_plus_space(Stack **stack, char *res_str, int *j);

/**
 * Функция process_operator обрабатывает операторы в выражении
 * @param stack Указатель на указатель на вершину стека, используемого для
 * хранения операторов.
 * @param res_str Строка, в которую добавляются извлеченные операторы и текущий
 * оператор.
 * @param j Указатель на индекс в строке результата, куда будут добавлены
 * извлеченные операторы и текущий оператор.
 * @param op Текущий оператор, который нужно обработать и добавить в стек.
 */

/**
 * @brief Обрабатывает оператор, добавляя его в стек и выталкивая операторы с
 * более высоким приоритетом.
 * @param stack Указатель на верх стека.
 * @param res_str Строка, в которую добавляются символы операторов.
 * @param j Указатель на индекс в строке результата.
 * @param op Оператор для обработки.
 */
void process_operator(Stack **stack, char *res_str, int *j, char op);

#endif